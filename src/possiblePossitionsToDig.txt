    char* possiblePoints = (char*)malloc(5 * sizeof(char));
    Point adjecentPoints[] = {
        {point.x + 1, point.y},
        {point.x, point.y - 1},
        {point.x - 1, point.y},
        {point.x, point.y + 1}
    };
    Point dir[] = {
        {1, 0},
        {0, -1},
        {-1, 0},
        {0, 1}
    };
    int i, index, strIndex = 0;
    for (i = 0; i < 4; i++){
        index = get1dIndex(maze, adjecentPoints[i]);
        if (
            (index != -1) &&
            (maze->board[index] != WALL) &&
            (maze->board[index] != AIR) &&
            (maze->board[index] != START) &&
            (maze->board[index] != END) 
        ){
            Point nxtPoint = nxtPointInDir(point, dir[i]);
            index = get1dIndex(maze, nxtPoint);
            
            if (
                (index != -1) &&
                (maze->board[index] != AIR) &&
                (maze->board[index] != WALL)
            ){
                switch (i){
                    case 0:
                        possiblePoints[strIndex] = 'E';
                        break;
                    case 1:
                        possiblePoints[strIndex] = 'S';
                        break;
                    case 2:
                        possiblePoints[strIndex] = 'W';
                        break;
                    case 3:
                        possiblePoints[strIndex] = 'N';
                        break;
                }
                strIndex++;
            }
        }
    }
    possiblePoints[strIndex] = '\0';
    return possiblePoints;